import React, { useState } from 'react'\nimport { Sparkles, Lightbulb, ArrowRight, Clock, TrendingUp, Zap, ChevronDown, ChevronUp } from 'lucide-react'\nimport { AISuggestion, AutoCompletionSuggestion } from '../hooks/useAISuggestions'\n\ninterface AISuggestionPanelProps {\n  suggestions: AISuggestion[]\n  autoCompletions: AutoCompletionSuggestion[]\n  isLoading: boolean\n  onApplySuggestion: (suggestion: AISuggestion) => void\n  onApplyCompletion: (completion: AutoCompletionSuggestion) => void\n  className?: string\n}\n\nconst AISuggestionPanel: React.FC<AISuggestionPanelProps> = ({\n  suggestions,\n  autoCompletions,\n  isLoading,\n  onApplySuggestion,\n  onApplyCompletion,\n  className = ''\n}) => {\n  const [isExpanded, setIsExpanded] = useState(true)\n  const [activeTab, setActiveTab] = useState<'suggestions' | 'completions'>('suggestions')\n\n  const getSuggestionIcon = (type: AISuggestion['type']) => {\n    switch (type) {\n      case 'completion':\n        return <ArrowRight className=\"w-4 h-4\" />\n      case 'enhancement':\n        return <TrendingUp className=\"w-4 h-4\" />\n      case 'related':\n        return <Lightbulb className=\"w-4 h-4\" />\n      case 'priority':\n        return <Clock className=\"w-4 h-4\" />\n      case 'category':\n        return <Zap className=\"w-4 h-4\" />\n      default:\n        return <Sparkles className=\"w-4 h-4\" />\n    }\n  }\n\n  const getSuggestionColors = (type: AISuggestion['type'], confidence: number) => {\n    const baseColors = {\n      completion: 'bg-blue-50 border-blue-200 text-blue-800 hover:bg-blue-100',\n      enhancement: 'bg-purple-50 border-purple-200 text-purple-800 hover:bg-purple-100',\n      related: 'bg-green-50 border-green-200 text-green-800 hover:bg-green-100',\n      priority: 'bg-orange-50 border-orange-200 text-orange-800 hover:bg-orange-100',\n      category: 'bg-yellow-50 border-yellow-200 text-yellow-800 hover:bg-yellow-100'\n    }\n    \n    return baseColors[type] || baseColors.completion\n  }\n\n  const getConfidenceBar = (confidence: number) => {\n    const percentage = Math.round(confidence * 100)\n    const color = confidence > 0.8 ? 'bg-green-400' : confidence > 0.6 ? 'bg-yellow-400' : 'bg-red-400'\n    \n    return (\n      <div className=\"flex items-center space-x-2 text-xs\">\n        <span className=\"text-gray-500\">Confidence:</span>\n        <div className=\"w-12 h-2 bg-gray-200 rounded-full overflow-hidden\">\n          <div \n            className={`h-full ${color} transition-all duration-300`}\n            style={{ width: `${percentage}%` }}\n          />\n        </div>\n        <span className=\"text-gray-600 font-medium\">{percentage}%</span>\n      </div>\n    )\n  }\n\n  if (!suggestions.length && !autoCompletions.length && !isLoading) {\n    return null\n  }\n\n  return (\n    <div className={`bg-white border border-gray-200 rounded-xl shadow-sm ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-100\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"p-1.5 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg\">\n            <Sparkles className=\"w-4 h-4 text-white\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-gray-900\">AI Suggestions</h3>\n            <p className=\"text-xs text-gray-500\">\n              {isLoading ? 'Generating suggestions...' : \n               `${suggestions.length + autoCompletions.length} intelligent suggestions`}\n            </p>\n          </div>\n        </div>\n        \n        <button\n          onClick={() => setIsExpanded(!isExpanded)}\n          className=\"p-1 text-gray-400 hover:text-gray-600 transition-colors\"\n        >\n          {isExpanded ? <ChevronUp className=\"w-4 h-4\" /> : <ChevronDown className=\"w-4 h-4\" />}\n        </button>\n      </div>\n\n      {isExpanded && (\n        <>\n          {/* Tabs */}\n          {suggestions.length > 0 && autoCompletions.length > 0 && (\n            <div className=\"flex border-b border-gray-100\">\n              <button\n                onClick={() => setActiveTab('suggestions')}\n                className={`flex-1 px-4 py-2 text-sm font-medium transition-colors ${\n                  activeTab === 'suggestions'\n                    ? 'text-purple-600 border-b-2 border-purple-600 bg-purple-50'\n                    : 'text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                Smart Suggestions ({suggestions.length})\n              </button>\n              <button\n                onClick={() => setActiveTab('completions')}\n                className={`flex-1 px-4 py-2 text-sm font-medium transition-colors ${\n                  activeTab === 'completions'\n                    ? 'text-blue-600 border-b-2 border-blue-600 bg-blue-50'\n                    : 'text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                Auto-Complete ({autoCompletions.length})\n              </button>\n            </div>\n          )}\n\n          {/* Content */}\n          <div className=\"p-4\">\n            {isLoading && (\n              <div className=\"flex items-center justify-center py-6\">\n                <div className=\"flex items-center space-x-2 text-gray-500\">\n                  <Sparkles className=\"w-4 h-4 animate-spin\" />\n                  <span className=\"text-sm\">Analyzing your input...</span>\n                </div>\n              </div>\n            )}\n\n            {/* Smart Suggestions */}\n            {!isLoading && (activeTab === 'suggestions' || autoCompletions.length === 0) && suggestions.length > 0 && (\n              <div className=\"space-y-3\">\n                <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Smart Suggestions</h4>\n                {suggestions.map((suggestion) => (\n                  <div\n                    key={suggestion.id}\n                    className={`p-3 border rounded-lg cursor-pointer transition-all duration-200 ${\n                      getSuggestionColors(suggestion.type, suggestion.confidence)\n                    }`}\n                    onClick={() => onApplySuggestion(suggestion)}\n                  >\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {getSuggestionIcon(suggestion.type)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium text-sm mb-1\">\n                          {suggestion.text}\n                        </p>\n                        <p className=\"text-xs opacity-75 mb-2\">\n                          {suggestion.reasoning || suggestion.context}\n                        </p>\n                        {getConfidenceBar(suggestion.confidence)}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Auto-Completions */}\n            {!isLoading && (activeTab === 'completions' || suggestions.length === 0) && autoCompletions.length > 0 && (\n              <div className=\"space-y-2\">\n                <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Auto-Complete</h4>\n                {autoCompletions.map((completion) => (\n                  <div\n                    key={completion.id}\n                    className=\"p-3 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors\"\n                    onClick={() => onApplyCompletion(completion)}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-gray-900\">\n                          <span className=\"text-gray-400\">{completion.text}</span>\n                          <span className=\"font-medium text-blue-600\">\n                            {completion.completion.slice(completion.text.length)}\n                          </span>\n                        </p>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <span className={`text-xs px-2 py-1 rounded-full ${\n                            completion.category === 'business' ? 'bg-purple-100 text-purple-700' :\n                            completion.category === 'common' ? 'bg-blue-100 text-blue-700' :\n                            'bg-green-100 text-green-700'\n                          }`}>\n                            {completion.category}\n                          </span>\n                          <span className=\"text-xs text-gray-500\">\n                            Score: {Math.round(completion.score * 100)}%\n                          </span>\n                        </div>\n                      </div>\n                      <ArrowRight className=\"w-4 h-4 text-gray-400\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Empty State */}\n            {!isLoading && suggestions.length === 0 && autoCompletions.length === 0 && (\n              <div className=\"text-center py-6\">\n                <Lightbulb className=\"w-8 h-8 text-gray-300 mx-auto mb-2\" />\n                <p className=\"text-sm text-gray-500\">Start typing to see AI suggestions</p>\n              </div>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default AISuggestionPanel"