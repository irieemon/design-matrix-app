import jsPDF from 'jspdf'
import { Project, RoadmapData } from '../types'

export const exportRoadmapToPDF = (roadmapData: RoadmapData, ideaCount: number, project: Project | null = null) => {
  try {
    const doc = new jsPDF()
    let yPos = 20
    const pageH = doc.internal.pageSize.height
    const marginL = 20

    // Simple page break function
    const pageBreak = (space: number) => {
      if (yPos + space > pageH - 20) {
        doc.addPage()
        yPos = 20
      }
    }

    // Header
    doc.setFontSize(20)
    doc.setFont('helvetica', 'bold')
    const title = project ? `${project.name} - Project Roadmap` : 'AI Project Roadmap'
    doc.text(title, marginL, yPos)
    yPos = yPos + 8

    if (project && project.description) {
      doc.setFontSize(12)
      doc.setFont('helvetica', 'italic')
      doc.setTextColor(64, 64, 64)
      doc.text(project.description, marginL, yPos)
      yPos = yPos + 6
      doc.setTextColor(0, 0, 0)
    }

    doc.setFontSize(12)
    doc.setFont('helvetica', 'normal')
    doc.text(`Analysis of ${ideaCount} ideas • Generated on ${new Date().toLocaleDateString()}`, marginL, yPos)
    yPos = yPos + 8

    doc.setFontSize(10)
    doc.setTextColor(64, 64, 64)
    doc.text(`Total Duration: ${roadmapData.roadmapAnalysis?.totalDuration || 'N/A'}`, marginL, yPos)
    yPos = yPos + 20

    // Project Phases
    pageBreak(40)
    doc.setFontSize(16)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(0, 0, 0)
    doc.text('Implementation Roadmap', marginL, yPos)
    yPos = yPos + 15

    // Process phases
    const phases = roadmapData.roadmapAnalysis?.phases || []
    for (let i = 0; i < phases.length; i++) {
      const phase = phases[i]
      if (!phase) continue
      
      pageBreak(60)
      
      // Phase Header
      doc.setFontSize(14)
      doc.setFont('helvetica', 'bold')
      doc.setTextColor(102, 16, 242)
      doc.text(`${phase.phase || 'Unknown Phase'} (${phase.duration || 'Unknown Duration'})`, marginL, yPos)
      doc.setTextColor(0, 0, 0)
      yPos = yPos + 10

      // Phase Description
      doc.setFontSize(11)
      doc.setFont('helvetica', 'normal')
      doc.text(phase.description || 'No description available', marginL + 5, yPos)
      yPos = yPos + 10

      // Add some spacing between phases
      yPos = yPos + 15
    }

    // Footer
    const totalPages = doc.getNumberOfPages()
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i)
      doc.setFontSize(8)
      doc.setTextColor(128, 128, 128)
      doc.text(`Generated by Prioritas AI • Page ${i} of ${totalPages}`, marginL, pageH - 10)
      doc.text(new Date().toLocaleDateString(), 180, pageH - 10)
    }

    // Save the PDF
    const projectPrefix = project ? `${project.name.replace(/[^a-zA-Z0-9]/g, '_')}_` : ''
    const fileName = `${projectPrefix}Project_Roadmap_${new Date().toISOString().split('T')[0]}.pdf`
    doc.save(fileName)
    
  } catch (error) {
    console.error('PDF export failed:', error)
    alert('PDF export failed. Please try again.')
  }
}

export const exportInsightsToPDF = (insights: any, ideaCount: number, project: Project | null = null) => {
  try {
    const doc = new jsPDF()
    let yPos = 20
    const marginL = 20

    // Header
    doc.setFontSize(20)
    doc.setFont('helvetica', 'bold')
    const reportTitle = project ? `${project.name} - Strategic Insights Report` : 'AI Strategic Insights Report'
    doc.text(reportTitle, marginL, yPos)
    yPos = yPos + 10

    doc.setFontSize(12)
    doc.setFont('helvetica', 'normal')
    doc.text(`Analysis of ${ideaCount} ideas • Generated on ${new Date().toLocaleDateString()}`, marginL, yPos)
    yPos = yPos + 20

    // Executive Summary
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text('Executive Summary', marginL, yPos)
    yPos = yPos + 10

    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.text(insights.executiveSummary || 'No summary available', marginL, yPos)

    // Save the PDF
    const projectPrefix = project ? `${project.name.replace(/[^a-zA-Z0-9]/g, '_')}_` : ''
    const fileName = `${projectPrefix}AI_Insights_Report_${new Date().toISOString().split('T')[0]}.pdf`
    doc.save(fileName)

  } catch (error) {
    console.error('PDF export failed:', error)
    alert('PDF export failed. Please try again.')
  }
}