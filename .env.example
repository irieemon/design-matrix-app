# Supabase Configuration
# Get these values from your Supabase project dashboard
VITE_SUPABASE_URL=https://your-project-ref.supabase.co
VITE_SUPABASE_ANON_KEY=your-supabase-anon-key

# Server-side Supabase Configuration (required for API endpoints)
# This key has elevated permissions and should NEVER be exposed to clients
SUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key

# IMPORTANT: AI API keys are now SERVER-SIDE ONLY for security
# These should be set in your deployment environment (Vercel, etc.)
# DO NOT add VITE_ prefix as these should NOT be exposed to clients

# OpenAI API Configuration (Server-side only - for AI features)
# OPENAI_API_KEY=sk-your-openai-api-key

# Anthropic API Configuration (Server-side only - alternative to OpenAI)  
# ANTHROPIC_API_KEY=your-anthropic-api-key

# Instructions:
# 1. Copy this file to .env (remove .example)
# 2. Replace the Supabase placeholder values with your actual keys
# 3. For AI features, set the API keys in your deployment environment:
#    - In Vercel: Project Settings > Environment Variables
#    - Add: OPENAI_API_KEY and/or ANTHROPIC_API_KEY (without VITE_ prefix)
# 4. The .env file is already in .gitignore and won't be committed
# 
# To get Supabase keys:
# - Sign up at https://supabase.com
# - Create a new project
# - Go to Settings > API
# - Copy the Project URL and anon/public key
# - IMPORTANT: Also copy the service_role key for server-side operations
# - The service_role key should be kept secure and never exposed to clients
#
# To get OpenAI API key:
# - Sign up at https://platform.openai.com
# - Go to API Keys and create a new key
# - Set as OPENAI_API_KEY in deployment environment (NOT in .env with VITE_)
#
# To get Anthropic API key:
# - Sign up at https://console.anthropic.com
# - Go to API Keys and create a new key  
# - Set as ANTHROPIC_API_KEY in deployment environment (NOT in .env with VITE_)
#
# Performance Monitoring Configuration
# Enable performance monitoring for authentication and app performance
VITE_ENABLE_PERFORMANCE_MONITORING=true

# Feature Flags
# httpOnly Cookie Authentication (Phase 2 Security Enhancement)
# Set to 'true' to enable cookie-based authentication (eliminates XSS token theft)
# Set to 'false' to use legacy localStorage authentication
# Default: false (gradual rollout controlled by this flag)
VITE_FEATURE_HTTPONLY_AUTH=false

# Component State Storage
# Optional encryption key for server-side component state storage (256-bit key)
# Generate with: openssl rand -base64 32
# STATE_ENCRYPTION_KEY=your-256-bit-encryption-key-here

# ═══════════════════════════════════════════════════════════
# Rate Limiting Configuration
# ═══════════════════════════════════════════════════════════

# Environment mode (affects rate limiting strictness)
# development: 10-20x more lenient limits for rapid iteration
# production: Strict limits for security (brute-force protection)
# Defaults to 'production' if not set
NODE_ENV=development

# DEVELOPMENT ONLY: Bypass rate limiting entirely
# ⚠️  DANGER: Completely disables brute-force protection
# ⚠️  NEVER set to 'true' in production
# Set to 'true' only for local testing when rate limits are blocking development
# Default: false (rate limiting enabled)
BYPASS_RATE_LIMIT=false

# ═══════════════════════════════════════════════════════════
# Test Server Configuration
# ═══════════════════════════════════════════════════════════

# Port for Playwright test server (must match playwright.base.config.ts)
TEST_PORT=3003
BASE_URL=http://localhost:3003

# Playwright Test Configuration
# CI environment is auto-detected
# CI=true

# Debug mode for Playwright (enables verbose output and traces)
# PWDEBUG=1

# Run Playwright tests in headed mode (visible browser)
# HEADED=1

# Update visual regression baselines
# UPDATE_SNAPSHOTS=true

# SECURITY NOTE: AI API keys are now handled server-side only for security.
# The client-side code makes requests to /api/ai/* endpoints instead of direct API calls.